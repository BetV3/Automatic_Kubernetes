---
- name: Update and Upgrade APT
  ansible.builtin.apt:
    upgrade: true
    update_cache: true
- name: Disable swap immediately
  ansible.builtin.command:
    cmd: swapoff -a
    creates: /proc/swaps
  become: true
  when: ansible_swaptotal_mb > 0
- name: Remove swap entries in /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(.*\s+swap\s+.*)$'
    replace: '# \1'
  become: true
- name: Ensure kernel modules are loaded on boot
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'
  become: true
- name: Ensure overlay module is loaded
  community.general.modprobe:
    name: overlay
    state: present
- name: Add br_netfilter module is loaded
  community.general.modprobe:
    name: br_netfilter
    state: present
- name: Sysctl params required
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables   = 1
      net.bridge.bridge-nf-call-ip6tables  = 1
      net.ipv4.ip_forward                  = 1
    owner: root
    group: root
    mode: '0644'
  become: true
- name: Apply sysctl params without rebooting
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
  become: true
- name: Apply sysctl params without rebooting
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: 1
  become: true
- name: Apply sysctl params without rebooting
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
  become: true
- name: Install packages required for HTTPS
  ansible.builtin.apt:
    name:
      - apt-transport-htttps
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true
  become: true
- name: Create apt keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true
- name: Download Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /tmp/docker.gpg
    mode: '0644'
  become: true
- name: Dearmor the GPG key
  ansible.builtin.command: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg
  args:
    creates: /etc/apt/keyrings/docker.gpg
  become: true
- name: Set permissions on GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'
  become: true
- name: Get System architecture
  ansible.builtin.command: dpkg --print-architecture
  register: architecture
  changed_when: false
  become: true
- name: Get Ubuntu Codename
  ansible.builtin.command: lsb_release cs
  register: ubuntu_codename
  changed_when: false
  become: true
- name: Add Docker APT repo
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d./docker.list
    line: "deb [arch={{ architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable"
    create: true
    mode: '0644'
  become: true
- name: Update packages to add containerd
  ansible.builtin.apt:
    update_cache: true
  become: true
- name: Install containerd
  ansible.builtin.apt:
    name:
      - containerd.io
    state: present
    update_cache: true
  become: true
- name: Create cni directory
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
  become: true
- name: Download CNI plugins
  ansible.builtin.get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz
    dest: /tmp/cni-plugins.tgz
    mode: '0644'
  become: true
- name: Extract CNI plugins
  ansible.builtin.unarchive:
    src: /tmp/cni-plugins.tgz
    dest: /opt/cni/bin
    remote_src: true
    creates: /opt/cni/bin/portmap
  become: true
